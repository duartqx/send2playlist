#!/usr/bin/env python3

import sys
from re import search,sub,IGNORECASE
from requests import get

def get_title(url:str) -> str:
    ''' Sending the url to a get command from the requests module and parsing it's content through a regex search from the re module we find the title  '''
    content = get(url)
    content.encoding = 'utf-8'
    # The previous line tries to fix the encoding from 'ISO-8859-1' to 'utf-8', otherwise quotes/apostrophes and double quotes on titles would show up wrong, for example &#39 for a single quote, for some reason this is still not quite right
    return search('<\W*title\W*(.*)</title', content.text, IGNORECASE).group(1)

def yewtube_to_youtube(url:str) -> str:
    return f'https://youtube.com/{url.split("/")[-1]}'

def clean_title(url:str) -> str:
    '''Cleans the title from bad decoding'''
    if '&#39;' in url:
        url:str = sub('&#39;','\'',url)
    if '&quot;' in url:
        url:str = sub('&quot;','\'',url)
    return url

if __name__ == '__main__':

    # Gets the url that was parsed as an argument 
    url:str = sys.argv[1]

    if 'yewtu' in url:
        url:str = yewtube_to_youtube(url)

    # Get's the title
    title = clean_title(get_title(url))

    if title.endswith('- YouTube'):
        # All youtube titles have the '- Youtube' suffix, so this conditional simply cleans it
        title = title[:title.find('- YouTube')]
   
    # First checks if the title is not just 'Youtube'
    # (If it is just 'Youtube' it means the video had a problem, like a url still marked as premiere or a live stream link to youtube that hasn't started yet. So these kinds of links would fail silently and just send a 'Youtube' as their title)
    # only after this check the title and url are written to the playlist file

    if title != 'YouTube':
        with open('.local/share/playlist','a') as fh:
            # Writes title + url + newline to the playlist file
            fh.write(f'{title} - {url}\n')
    else:
        sys.exit(1)

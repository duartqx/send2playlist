#!/usr/bin/env python3

import sys
from requests import get
from re import search,sub,IGNORECASE

PLAYLIST_FILE='~/.local/share/playlist'
# The playlist file to be appended with open()

def get_title(url:str) -> str:
    ''' Sending the url to a requests.get comman and searching the response's
    content with re.search we find the title  '''
    content = get(url).text
    return search('<\W*title\W*(.*)</title', content, IGNORECASE).group(1)

def yewtube_to_youtube(url:str) -> str:
    ''' Converts yewtu.be url to youtube.com url to avoid any connection pro-
    blem that yewtube might have on a random day .
    Yewtu.be is an invidious instance, basically an alternative open source
    front end to youtube.com. Anyone can host their own instance of invidious,
    and many do.
    This function can be used with any other invidious instances other than 
    yewtu.be, but the original url must end in a valid youtube's url
    '''
    return f'https://youtube.com/{url.split("/")[-1]}'

def clean_title(url:str) -> str:
    ''' requests.get from google sites returns html with bad encoding in 
    ISO-8859-1. So characters like ' and " are shown as &#39; and &quot;
    I haven't found a solution to force the right utf-8 encoding so for now 
    the script substitutes those two problems with their right character, 
    using re.sub. Since a title can have simutaniously ' and ", the script 
    uses two if statements instead of one if and one elif.
    '''
    if '&#39;' in url:
        url:str = sub('&#39;','\'',url)
    if '&quot;' in url:
        url:str = sub('&quot;','\'',url)
    return url

if __name__ == '__main__':

    # Gets the url that was parsed as an argument 
    url:str = sys.argv[1]

    if 'yewtu' in url:
        url:str = yewtube_to_youtube(url)

    # Get's the title
    title = get_title(url)
    # Cleans it from bad encoding, if any
    title = clean_title(title)

    if title.endswith('- YouTube'):
        # All youtube titles have '- Youtube' as a suffix, using find to get 
        # the index of were the suffix is and with it slicing the string 
        # we clean the titles from it
        title = title[:title.find('- YouTube')]
   
    if title != 'YouTube':
    # First checks if the title is not just 'Youtube'
    # (If it is just 'Youtube' it means the video had a problem, like a url 
    # still marked as premiere or a live stream link to youtube that hasn't 
    # started yet. So these kinds of links would fail silently and just send a 
    # 'Youtube' as their title)
    # only after this check the title and url is written to the playlist file

        with open(PLAYLIST_FILE,'a') as fh:
            # Appends title + url + newline to the playlist file
            # If the file doens't exists open() with the 'a' arg creates and 
            # writes the new file, if it exists open() + fh.write appends the 
            # title + url to the end of the file
            fh.write(f'{title} - {url}\n')
    else:
        # Exists with return value of 1 so that it can be captured by bash and
        # the script send2notify executes the notification of an error, or 
        # success if the url and title were appended to the playlist file
        sys.exit(1)
